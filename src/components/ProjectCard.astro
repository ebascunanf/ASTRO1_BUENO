---
import type { Project } from '../types/projects';

interface Props extends Project {}

const { title, description, imageUrl, services, details, modelUrl } = Astro.props;

const images = [imageUrl];
if (details.additionalImages) {
  images.push(...details.additionalImages);
}
---

<div class="bg-white rounded-xl shadow-lg overflow-hidden group">
  <div class="relative [perspective:1000px]">
    <div class="relative transition-all duration-700 [transform-style:preserve-3d]" data-card-inner>
      <!-- Front side -->
      <div class="relative">
        <!-- Carousel -->
        <div class="relative overflow-hidden aspect-video">
          {images.map((image, index) => (
            <div 
              class="absolute inset-0 transition-opacity duration-500" 
              data-carousel-slide={index}
              style={`opacity: ${index === 0 ? '1' : '0'}`}
            >
              <img 
                src={image} 
                alt={`${title} - Imagen ${index + 1}`}
                class="w-full h-full object-cover"
              />
            </div>
          ))}
          
          <!-- Carousel Controls -->
          <div class="absolute inset-0 flex items-center justify-between p-4 opacity-0 group-hover:opacity-100 transition-opacity">
            <button 
              class="bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
              data-carousel-prev
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="m15 18-6-6 6-6"/>
              </svg>
            </button>
            <button 
              class="bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors"
              data-carousel-next
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="m9 18 6-6-6-6"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- Content -->
        <div class="p-6">
          <h3 class="text-xl font-bold mb-2">{title}</h3>
          <p class="text-gray-600 mb-4">{description}</p>
          <div class="flex flex-wrap gap-2 mb-4">
            {services.map((service) => (
              <span class="px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm">
                {service}
              </span>
            ))}
          </div>
          <div class="space-y-2 text-sm text-gray-500">
            <p><strong>Cliente:</strong> {details.client}</p>
            <p><strong>Fecha:</strong> {details.date}</p>
            <p><strong>Ubicación:</strong> {details.location}</p>
          </div>
        </div>

        <!-- 3D Model Button -->
        <button
          class="absolute bottom-4 left-4 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center space-x-2"
          data-view-model
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 3v19"/>
            <path d="M5 10h14"/>
            <path d="M5 15h14"/>
          </svg>
          <span>Ver Modelo 3D</span>
        </button>
      </div>

      <!-- Back side (3D Model) -->
      <div class="absolute inset-0 h-full w-full [backface-visibility:hidden] [transform:rotateY(180deg)]">
        <iframe
          src={modelUrl}
          class="w-full h-full border-0"
          allowfullscreen
        ></iframe>
        <button
          class="absolute bottom-4 left-4 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center space-x-2"
          data-view-description
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M14 9l-6 6"/>
            <path d="M9 9h5v5"/>
          </svg>
          <span>Ver Descripción</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  class ProjectCard {
    constructor(element: Element) {
      const inner = element.querySelector('[data-card-inner]');
      const viewModelBtn = element.querySelector('[data-view-model]');
      const viewDescBtn = element.querySelector('[data-view-description]');
      
      // Carousel functionality
      let currentSlide = 0;
      const slides = element.querySelectorAll('[data-carousel-slide]');
      const prevBtn = element.querySelector('[data-carousel-prev]');
      const nextBtn = element.querySelector('[data-carousel-next]');
      
      const showSlide = (index: number) => {
        slides.forEach((slide, i) => {
          (slide as HTMLElement).style.opacity = i === index ? '1' : '0';
        });
      };

      const nextSlide = () => {
        currentSlide = (currentSlide + 1) % slides.length;
        showSlide(currentSlide);
      };

      const prevSlide = () => {
        currentSlide = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(currentSlide);
      };

      // Auto-advance carousel
      const interval = setInterval(nextSlide, 5000);

      // Event listeners
      prevBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        clearInterval(interval);
        prevSlide();
      });

      nextBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        clearInterval(interval);
        nextSlide();
      });

      // Flip card functionality
      viewModelBtn?.addEventListener('click', () => {
        inner?.classList.add('rotate-y-180');
      });

      viewDescBtn?.addEventListener('click', () => {
        inner?.classList.remove('rotate-y-180');
      });

      // Auto-return to description after 30 seconds
      let flipTimeout: number;
      const autoReturn = () => {
        clearTimeout(flipTimeout);
        flipTimeout = setTimeout(() => {
          inner?.classList.remove('rotate-y-180');
        }, 30000);
      };

      viewModelBtn?.addEventListener('click', autoReturn);
    }
  }

  // Initialize all project cards
  document.querySelectorAll('.bg-white.rounded-xl').forEach(card => {
    new ProjectCard(card);
  });
</script>

<style>
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
</style>